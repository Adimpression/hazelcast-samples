<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util.xsd">

    <import resource="hazelcast-cache.xml"/>
    <import resource="hazelcast-distributed-cache-context.xml"/>
    <import resource="hazelcast-write-through-distributed-cache-context.xml"/>
    <import resource="hazelcast-executor-service-context.xml"/>

    <!-- Hazelcast instance based on default config with specific map configs. -->
    <bean id="presentationHazelcastInstance"
          class="com.hazelcast.core.Hazelcast"
          factory-method="newHazelcastInstance"
          destroy-method="shutdown">
        <constructor-arg ref="presentationHazelcastConfig"/>
    </bean>

    <!-- Hazelcast configuration. -->
    <bean id="presentationHazelcastConfig" parent="hazelcastGlobalConfig">
        <property name="instanceName" ref="presentationHazelcastInstanceName"/>
        <property name="groupConfig" ref="presentationHazelcastGroupConfig"/>
        <property name="networkConfig" ref="presentationHazelcastNetworkConfig"/>
        <property name="mapConfigs" ref="presentationHazelcastMapConfigs"/>
        <property name="executorConfigs" ref="presentationHazelcastExecutorConfigs"/>
    </bean>

    <!-- Hazelcast instance name. -->
    <bean id="presentationHazelcastInstanceName" class="java.lang.String">
        <constructor-arg index="0" value="HazelcastPresentation"/>
    </bean>

    <!-- Hazelcast group config. -->
    <bean id="presentationHazelcastGroupConfig" class="com.hazelcast.config.GroupConfig">
        <property name="name" value="PresentationClusterName"/>
        <property name="password" value="PresentationClusterPassword"/>
    </bean>

    <!-- Hazelcast network config. -->
    <bean id="presentationHazelcastNetworkConfig" parent="hazelcastNetworkConfig">
        <property name="port" value="5801"/>
    </bean>

    <!-- Hazelcast specific map configs for our presentation. -->
    <util:map id="presentationHazelcastMapConfigs">
        <entry key="inMemoryPresentationCache" value-ref="presentationHazelcastDistributedCacheConfig"/>
        <entry key="presentation" value-ref="writeThroughPresentationHazelcastCacheConfig"/>
        <!-- All new dynamically instantiated caches will be write-through caches. -->
        <!--<entry key="default" value-ref="writeThroughPresentationHazelcastCacheConfig"/>-->
    </util:map>

    <!-- Hazelcast presentation distributed cache. -->
    <bean id="presentationHazelcastDistributedCache"
          factory-bean="presentationHazelcastInstance"
          factory-method="getMap"
          lazy-init="true">
        <constructor-arg value="inMemoryPresentationCache"/>
    </bean>

    <!-- Hazelcast write-through presentation distributed cache. -->
    <bean id="writeThroughPresentationHazelcastDistributedCache"
          factory-bean="presentationHazelcastInstance"
          factory-method="getMap"
          lazy-init="true">
        <!-- Should be presentation in order to correspond to the table name. -->
        <constructor-arg value="presentation"/>
    </bean>

    <!-- Hazelcast executor service. -->
    <bean id="presentationHazelcastExecutorService"
          factory-bean="presentationHazelcastInstance"
          factory-method="getExecutorService"
          lazy-init="true">
        <constructor-arg value="presentationExecutor"/>
    </bean>

    <!-- Hazelcast cache pre initializer. -->
    <bean id="presentationHazelcastDistributedCacheStorePreInitializer"
          class="com.lohika.hazelcastpresentation.cache.manager.hazelcast.HazelcastDistributedCacheStorePreInitializer"
          lazy-init="true">
        <property name="template" ref="namedParameterJdbcTemplate" />
    </bean>

    <!-- Distributed cache manager based on Hazelcast. -->
    <bean id="presentationHazelcastDistributedCacheManager"
          class="com.lohika.hazelcastpresentation.cache.manager.hazelcast.HazelcastDistributedCacheManager"
          lazy-init="true">
        <constructor-arg ref="presentationHazelcastInstance"/>
        <constructor-arg ref="presentationHazelcastDistributedCacheStorePreInitializer"/>
    </bean>

</beans>
